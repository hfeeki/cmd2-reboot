>>> import cmd2
>>> from cmd2 import Cmd
>>> c = Cmd()
>>> c.multilineCommands = ['multiline']
>>> c.case_insensitive = True
>>> c._init_parser()
>>> print (c.currState.parser.parseString('').dump())
[]
>>> print (c.currState.parser.parseString('').dump())
[]
>>> print (c.currState.parser.parseString('/* empty command */').dump())
[]
>>> print (c.currState.parser.parseString('plainword').dump())
['plainword', '']
- command: plainword
- statement: ['plainword', '']
  - command: plainword
>>> print (c.currState.parser.parseString('termbare;').dump())
['termbare', '', ';', '']
- command: termbare
- statement: ['termbare', '', ';']
  - command: termbare
  - terminator: ;
- terminator: ;
>>> print (c.currState.parser.parseString('termbare; suffx').dump())
['termbare', '', ';', 'suffx']
- command: termbare
- statement: ['termbare', '', ';']
  - command: termbare
  - terminator: ;
- suffix: suffx
- terminator: ;
>>> print (c.currState.parser.parseString('barecommand').dump())
['barecommand', '']
- command: barecommand
- statement: ['barecommand', '']
  - command: barecommand
>>> print (c.currState.parser.parseString('COMmand with args').dump())
['command', 'with args']
- args: with args
- command: command
- statement: ['command', 'with args']
  - args: with args
  - command: command
>>> print (c.currState.parser.parseString('command with args and terminator; and suffix').dump())
['command', 'with args and terminator', ';', 'and suffix']
- args: with args and terminator
- command: command
- statement: ['command', 'with args and terminator', ';']
  - args: with args and terminator
  - command: command
  - terminator: ;
- suffix: and suffix
- terminator: ;
>>> print (c.currState.parser.parseString('simple | piped').dump())
['simple', '', '|', ' piped']
- command: simple
- pipeTo:  piped
- statement: ['simple', '']
  - command: simple
>>> print (c.currState.parser.parseString('double-pipe || is not a pipe').dump())
['double', '-pipe || is not a pipe']
- args: -pipe || is not a pipe
- command: double
- statement: ['double', '-pipe || is not a pipe']
  - args: -pipe || is not a pipe
  - command: double
>>> print (c.currState.parser.parseString('command with args, terminator;sufx | piped').dump())
['command', 'with args, terminator', ';', 'sufx', '|', ' piped']
- args: with args, terminator
- command: command
- pipeTo:  piped
- statement: ['command', 'with args, terminator', ';']
  - args: with args, terminator
  - command: command
  - terminator: ;
- suffix: sufx
- terminator: ;
>>> print (c.currState.parser.parseString('output into > afile.txt').dump())
['output', 'into', '>', 'afile.txt']
- args: into
- command: output
- output: >
- outputTo: afile.txt
- statement: ['output', 'into']
  - args: into
  - command: output
>>> print (c.currState.parser.parseString('output into;sufx | pipethrume plz > afile.txt').dump())
['output', 'into', ';', 'sufx', '|', ' pipethrume plz', '>', 'afile.txt']
- args: into
- command: output
- output: >
- outputTo: afile.txt
- pipeTo:  pipethrume plz
- statement: ['output', 'into', ';']
  - args: into
  - command: output
  - terminator: ;
- suffix: sufx
- terminator: ;
>>> print (c.currState.parser.parseString('output to paste buffer >> ').dump())
['output', 'to paste buffer', '>>', '']
- args: to paste buffer
- command: output
- output: >>
- statement: ['output', 'to paste buffer']
  - args: to paste buffer
  - command: output
>>> print (c.currState.parser.parseString('ignore the /* commented | > */ stuff;').dump())
['ignore', 'the /* commented | > */ stuff', ';', '']
- args: the /* commented | > */ stuff
- command: ignore
- statement: ['ignore', 'the /* commented | > */ stuff', ';']
  - args: the /* commented | > */ stuff
  - command: ignore
  - terminator: ;
- terminator: ;
>>> print (c.currState.parser.parseString('has > inside;').dump())
['has', '> inside', ';', '']
- args: > inside
- command: has
- statement: ['has', '> inside', ';']
  - args: > inside
  - command: has
  - terminator: ;
- terminator: ;
>>> print (c.currState.parser.parseString('multiline has > inside an unfinished command').dump())
['multiline', ' has > inside an unfinished command']
- multilineCommand: multiline
>>> print (c.currState.parser.parseString('multiline has > inside;').dump())
['multiline', 'has > inside', ';', '']
- args: has > inside
- multilineCommand: multiline
- statement: ['multiline', 'has > inside', ';']
  - args: has > inside
  - multilineCommand: multiline
  - terminator: ;
- terminator: ;
>>> print (c.currState.parser.parseString(r'multiline command /* with comment in progress;').dump())
['multiline', ' command /* with comment in progress;']
- multilineCommand: multiline
>>> print (c.currState.parser.parseString('multiline command /* with comment complete */ is done;').dump())
['multiline', 'command /* with comment complete */ is done', ';', '']
- args: command /* with comment complete */ is done
- multilineCommand: multiline
- statement: ['multiline', 'command /* with comment complete */ is done', ';']
  - args: command /* with comment complete */ is done
  - multilineCommand: multiline
  - terminator: ;
- terminator: ;
>>> print (c.currState.parser.parseString('multiline command ends\n\n').dump())
['multiline', 'command ends', '\n', '\n']
- args: command ends
- multilineCommand: multiline
- statement: ['multiline', 'command ends', '\n', '\n']
  - args: command ends
  - multilineCommand: multiline
  - terminator: ['\n', '\n']
- terminator: ['\n', '\n']
>>> print (c.currState.parser.parseString('multiline command "with term; ends" now\n\n').dump())
['multiline', 'command "with term; ends" now', '\n', '\n']
- args: command "with term; ends" now
- multilineCommand: multiline
- statement: ['multiline', 'command "with term; ends" now', '\n', '\n']
  - args: command "with term; ends" now
  - multilineCommand: multiline
  - terminator: ['\n', '\n']
- terminator: ['\n', '\n']
>>> print (c.currState.parser.parseString('what if "quoted strings /* seem to " start comments?').dump())
['what', 'if "quoted strings /* seem to " start comments?']
- args: if "quoted strings /* seem to " start comments?
- command: what
- statement: ['what', 'if "quoted strings /* seem to " start comments?']
  - args: if "quoted strings /* seem to " start comments?
  - command: what
